---
- name: Generate pki wireguard_keys
  vyos.vyos.vyos_command:
    commands:
      - generate pki wireguard key-pair
    wait_for:
      - result[0] contains "Private key:" and result[1] contains "Public key:"
  register: wireguard_keys

- name: Extract Wireguard keys
  ansible.builtin.set_fact:
    wireguard_public_key: "{{ (wireguard_keys.stdout | regex_search(\"Public key: (.+=)\", '\\1'))[0] }}"
    wireguard_private_key: "{{ (wireguard_keys.stdout | regex_search(\"Private key: (.+=).+Public\", '\\1'))[0] }}"

- name: Generate symmetric key for each peer
  vyos.vyos.vyos_command:
    commands:
      - generate pki wireguard preshared-key
    wait_for:
      - result[0] contains "Pre-shared key:"
  with_items: "{{ vyos_wireguard.peers }}"
  register: wireguard_peers_symmetric_keys

- name: Extract the symmetric keys
  ansible.builtin.set_fact:
    wireguard_symmetric_keys: >-
      {{ 
        wireguard_peers_symmetric_keys.results
        | map(attribute='stdout')
        | flatten
        | map('regex_replace', '^Pre-shared key: ', '')
        | zip(vyos_wireguard.peers | map(attribute='peer_name'))
        | map('reverse')
        | community.general.dict
      }}

- name: Print Pre-shared keys
  ansible.builtin.debug:
    msg: "Peer: {{ item.peer_name }} - Pre-shared key: {{ wireguard_symmetric_keys[item.peer_name] }}"
  loop: "{{ vyos_wireguard.peers }}"
  loop_control:
    loop_var: item
  when: item.refresh_key

- name: Print Public Key
  ansible.builtin.debug:
    msg: "Public key: {{ wireguard_public_key }}"
  when: vyos_wireguard.refresh_keys

- name: Construct Wireguard Interface Configuration
  ansible.builtin.set_fact:
    wireguard_interface_configuration: |
      {% set cmds = [] %}
      {% if vyos_wireguard.refresh_keys %}
        {% set _ = cmds.append("interfaces wireguard " ~ vyos_wireguard.interface ~ " private-key " ~ wireguard_private_key) %}
      {% endif %}
      {% set _ = cmds.append("interfaces wireguard " ~ vyos_wireguard.interface ~ " address " ~ vyos_wireguard.interface_ip) %}
      {% set _ = cmds.append("interfaces wireguard " ~ vyos_wireguard.interface ~ " description " ~ vyos_wireguard.description) %}
      {% set _ = cmds.append("interfaces wireguard " ~ vyos_wireguard.interface ~ " port " ~ vyos_wireguard.listen_port) %}
      {{ cmds | join("\n") }}

- name: Setup Wireguard Interface
  vyos.vyos.vyos_config:
    lines: "{{ wireguard_interface_configuration.split('\\n') }}"
    save: true

- name: Construct Wireguard Peers Configuration
  ansible.builtin.set_fact:
    wireguard_peers_configuration: |
      {% set cmds = [] %}
      {% for peer in vyos_wireguard.peers %}
        {% if peer.refresh_key %}
          {% set _ = cmds.append("interfaces wireguard " ~ vyos_wireguard.interface ~ " peer " ~ peer.peer_name ~ " preshared-key " ~ wireguard_symmetric_keys[peer.peer_name]) %}
          {% set _ = cmds.append("interfaces wireguard " ~ vyos_wireguard.interface ~ " peer " ~ peer.peer_name ~ " public-key " ~ peer.public_key) %}
        {% endif %}
        {% for ip in peer.allowed_ips %}
          {% set _ = cmds.append("interfaces wireguard " ~ vyos_wireguard.interface ~ " peer " ~ peer.peer_name ~ " allowed-ips " ~ ip) %}
        {% endfor %}
        {% set _ = cmds.append("interfaces wireguard " ~ vyos_wireguard.interface ~ " peer " ~ peer.peer_name ~ " persistent-keepalive " ~ peer.persistent_keepalive_duration) %}
      {% endfor %}
      {{ cmds | join("\n") }}

- name: Setup Wireguard Peers
  vyos.vyos.vyos_config:
    lines: "{{ wireguard_peers_configuration.split('\\n') }}"
    save: true
